{"version":3,"file":"index.js","sources":["../src/types/index.ts","../src/common/constants.ts","../src/common/replicants.ts","../src/client/replicants.ts","../src/client/utils/getBadge.ts","../src/client/utils/getBadgeFromCurrentSets.ts","../src/client/utils/getEmote.ts","../src/client/utils/listenFor.ts","../src/client/index.ts"],"sourcesContent":["export interface Replicant<T> {\n  value?: T\n  namespace?: string\n  on(event: 'change', listener: (newValue?: T, oldValue?: T) => void): void\n}\n\nexport interface GameInfo {\n  id: string\n  name: string\n  box_art_url: string\n}\n\nexport interface StreamInfo {\n  id: string\n  user_id: string\n  user_name: string\n  game_id: string\n  type: 'live' | 'vodcast' | ''\n  title: string\n  viewer_count: number\n  started_at: number\n  language: string\n  thumbnail_url: string\n}\n\nexport interface UserInfo {\n  id: string\n  login: string\n  display_name: string\n  description: string\n  type: 'staff' | 'admin' | 'global_mod' | ''\n  broadcaster_type: 'partner' | 'affiliate' | ''\n  profile_image_url: string\n  offline_image_url: string\n  view_count: number\n}\n\nexport interface SubscriberInfo {\n  name: string\n  months: number\n  streak?: number\n  message?: string\n  plan: string\n  planName: string\n  isPrime: boolean\n}\n\nexport interface SubscriberGiftInfo extends SubscriberInfo {\n  gifter?: string\n  gifterDisplayName?: string\n  gifterGiftCount?: number\n}\n\nexport interface SubscriberCommunityGiftInfo {\n  count: number\n  gifter?: string\n  gifterDisplayName?: string\n  gifterGiftCount?: number\n  plan: string\n}\n\nexport interface FollowersInfo {\n  total: number\n  followers: FollowInfo[]\n}\n\nexport interface FollowInfo {\n  followed_at: number\n  from_id: string\n  from_name: string\n  to_id: string\n  to_name: string\n}\n\nexport interface ChatUser {\n  id?: string\n  name: string\n  username: string\n  color?: string\n  badges: Map<string, string>\n  isMod: boolean\n  isSubscriber: boolean\n}\n\nexport enum ChatMessageType {\n  ACTION = 'action',\n  MESSAGE = 'message',\n}\n\nexport interface ChatMessage {\n  id?: string\n  type: ChatMessageType\n  user: ChatUser\n  message: string\n  tokens: ChatMessageToken[]\n  isCheer: boolean\n  totalBits: number\n}\n\nexport interface ChatTextMessageToken {\n  type: 'text'\n  text: string\n}\n\nexport interface ChatEmoteMessageToken {\n  type: 'emote'\n  id: string\n  name: string\n}\n\nexport interface ChatCheerMessageToken {\n  type: 'cheer'\n  name: string\n  amount: number\n  displayInfo: {\n    url: string\n    color: string\n  }\n}\n\nexport type ChatMessageToken = ChatTextMessageToken | ChatEmoteMessageToken | ChatCheerMessageToken\n\nexport interface ChatActionPayload {\n  channel: string\n  message: ChatMessage\n}\n\nexport interface ChatMessagePayload {\n  channel: string\n  message: ChatMessage\n}\n\nexport interface ChatBanPayload {\n  channel: string\n  user: string\n  reason: string\n}\n\nexport interface ChatTimeoutPayload {\n  channel: string\n  user: string\n  reason: string\n  duration: number\n}\n\nexport interface ChatHostedPayload {\n  channel: string\n  byChannel: string\n  auto: boolean\n  viewers: number\n}\n\nexport interface ChatRaidPayload {\n  channel: string\n  byChannel: string\n  viewers: number\n}\n\nexport interface ChatRitualPayload {\n  channel: string\n  user: string\n  message: string\n  ritualName: string\n}\n\nexport interface ChatRemoveMessagePayload {\n  channel: string\n  messageId: string\n}\n\nexport interface MessageTypes {\n  'user.follower': FollowInfo\n  'user.subscription': SubscriberInfo\n  'user.subscription.gift': SubscriberGiftInfo\n  'user.subscription.community': SubscriberCommunityGiftInfo\n  'user.hosted': ChatHostedPayload\n  'user.raid': ChatRaidPayload\n  'chat.action': ChatActionPayload\n  'chat.message': ChatMessagePayload\n  'chat.ritual': ChatRitualPayload\n  'chat.clear': undefined\n  'chat.removeMessage': ChatRemoveMessagePayload\n  'chat.ban': ChatBanPayload\n  'chat.timeout': ChatTimeoutPayload\n}\n\nexport type TwitchieEmitFunction = <T extends keyof MessageTypes>(action: T, payload: MessageTypes[T]) => void\n\nexport type TwitchieListenFunction = <T extends keyof MessageTypes>(\n  action: T,\n  callback: (payload: MessageTypes[T]) => void\n) => void\n\nexport interface TwitchieReplicants {\n  channel: {\n    id: Replicant<string>\n  }\n  stream: {\n    info: Replicant<StreamInfo>\n  }\n  game: {\n    id: Replicant<string>\n    info: Replicant<GameInfo>\n  }\n  user: {\n    id: Replicant<string>\n    info: Replicant<UserInfo>\n    followers: Replicant<FollowersInfo>\n  }\n  chat: {\n    channel: Replicant<string>\n    badges: Replicant<any>\n    cheermotes: Replicant<any>\n  }\n}\n","const NAMESPACE = 'nodecg-twitchie'\n\nexport { NAMESPACE }\n","import { FollowersInfo, GameInfo, Replicant, StreamInfo, TwitchieReplicants, UserInfo } from '../types'\nimport { NAMESPACE } from './constants'\n\ninterface ReplicantOptionsBag<T> {\n  defaultValue?: T\n  persistent?: boolean\n}\n\nconst createReplicant = <T>(\n  nodecg: any,\n  name: string,\n  { defaultValue, persistent }: ReplicantOptionsBag<T> = {}\n): Replicant<T> =>\n  nodecg.Replicant(name, NAMESPACE, {\n    defaultValue,\n    persistent: !!persistent,\n  })\n\nexport { ReplicantOptionsBag, createReplicant }\n\nexport default (nodecg: any, defaults: any = {}): TwitchieReplicants => {\n  const createReplicantWithDefault = <T>(name: string): Replicant<T> => createReplicant(nodecg, name, defaults[name])\n\n  return {\n    channel: {\n      id: createReplicantWithDefault<string>('channel.id'),\n    },\n\n    stream: {\n      info: createReplicantWithDefault<StreamInfo>('stream.info'),\n    },\n\n    game: {\n      id: createReplicantWithDefault<string>('game.id'),\n      info: createReplicantWithDefault<GameInfo>('game.info'),\n    },\n\n    user: {\n      id: createReplicantWithDefault<string>('user.id'),\n      info: createReplicantWithDefault<UserInfo>('user.info'),\n      followers: createReplicantWithDefault<FollowersInfo>('user.followers'),\n    },\n\n    chat: {\n      channel: createReplicantWithDefault<string>('chat.channel'),\n      badges: createReplicantWithDefault<any>('chat.badges'),\n      cheermotes: createReplicantWithDefault<any>('chat.cheermotes'),\n    },\n  }\n}\n","import createReplicants, { createReplicant, ReplicantOptionsBag } from '../common/replicants'\n\nconst replicants = createReplicants(nodecg)\n\nconst createLocalReplicant = <T>(name: string, options?: ReplicantOptionsBag<T>) =>\n  createReplicant(nodecg, name, options)\n\nexport { createLocalReplicant as createReplicant }\nexport default replicants\n","const getBadge = (toFind: string, badges: any) => badges[toFind]\n\nexport default getBadge\n","import replicants from '../replicants'\nimport getBadge from './getBadge'\n\nconst getCheermoteFromCurrentSets = (name: string) => getBadge(name, replicants.chat.badges.value)\n\nexport default getCheermoteFromCurrentSets\n","const EMOTE_PREFIX = 'http://static-cdn.jtvnw.net/emoticons/v1'\n\nconst getEmote = (name: string, size: string = '3.0') => `${EMOTE_PREFIX}/${name}/${size}`\n\nexport { EMOTE_PREFIX }\n\nexport default getEmote\n","/* global nodecg */\n\nimport { NAMESPACE } from '../../common/constants'\nimport { TwitchieListenFunction } from '../../types'\n\nconst listenFor: TwitchieListenFunction = (name, handler) => nodecg.listenFor(name, NAMESPACE, handler)\n\nexport default listenFor\n","import replicants, { createReplicant } from './replicants'\nimport { TwitchieListenFunction, TwitchieReplicants } from '../types'\n\nimport getBadge from './utils/getBadge'\nimport getBadgeFromCurrentSets from './utils/getBadgeFromCurrentSets'\nimport getEmote from './utils/getEmote'\nimport listenFor from './utils/listenFor'\n\nexport { createReplicant, listenFor, getEmote, getBadge, getBadgeFromCurrentSets }\n\ntype TwitchieClient = TwitchieReplicants & {\n  on: TwitchieListenFunction\n}\n\nconst client: TwitchieClient = {\n  ...replicants,\n  on: listenFor,\n}\n\nexport { TwitchieClient }\nexport default client\n"],"names":[],"mappings":"IAoFY,eAGX;AAHD,WAAY,eAAe;IACzB,oCAAiB,CAAA;IACjB,sCAAmB,CAAA;CACpB,EAHW,eAAe,KAAf,eAAe,QAG1B;;ACvFD,MAAM,SAAS,GAAG,iBAAiB,CAAA;;ACQnC,MAAM,eAAe,GAAG,CACtB,MAAW,EACX,IAAY,EACZ,EAAE,YAAY,EAAE,UAAU,KAA6B,EAAE,KAEzD,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE;IAChC,YAAY;IACZ,UAAU,EAAE,CAAC,CAAC,UAAU;CACzB,CAAC,CAAA;AAEJ,AAEA,uBAAe,CAAC,MAAW,EAAE,WAAgB,EAAE;IAC7C,MAAM,0BAA0B,GAAG,CAAI,IAAY,KAAmB,eAAe,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;IAEnH,OAAO;QACL,OAAO,EAAE;YACP,EAAE,EAAE,0BAA0B,CAAS,YAAY,CAAC;SACrD;QAED,MAAM,EAAE;YACN,IAAI,EAAE,0BAA0B,CAAa,aAAa,CAAC;SAC5D;QAED,IAAI,EAAE;YACJ,EAAE,EAAE,0BAA0B,CAAS,SAAS,CAAC;YACjD,IAAI,EAAE,0BAA0B,CAAW,WAAW,CAAC;SACxD;QAED,IAAI,EAAE;YACJ,EAAE,EAAE,0BAA0B,CAAS,SAAS,CAAC;YACjD,IAAI,EAAE,0BAA0B,CAAW,WAAW,CAAC;YACvD,SAAS,EAAE,0BAA0B,CAAgB,gBAAgB,CAAC;SACvE;QAED,IAAI,EAAE;YACJ,OAAO,EAAE,0BAA0B,CAAS,cAAc,CAAC;YAC3D,MAAM,EAAE,0BAA0B,CAAM,aAAa,CAAC;YACtD,UAAU,EAAE,0BAA0B,CAAM,iBAAiB,CAAC;SAC/D;KACF,CAAA;CACF,CAAA;;AC/CD,MAAM,UAAU,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAA;AAE3C,MAAM,oBAAoB,GAAG,CAAI,IAAY,EAAE,OAAgC,KAC7E,eAAe,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC;;ACLxC,MAAM,QAAQ,GAAG,CAAC,MAAc,EAAE,MAAW,KAAK,MAAM,CAAC,MAAM,CAAC,CAAA;;ACGhE,MAAM,2BAA2B,GAAG,CAAC,IAAY,KAAK,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;;ACHlG,MAAM,YAAY,GAAG,0CAA0C,CAAA;AAE/D,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAE,OAAe,KAAK,KAAK,GAAG,YAAY,IAAI,IAAI,IAAI,IAAI,EAAE,CAAA;;ACF1F;AAEA,AAGA,MAAM,SAAS,GAA2B,CAAC,IAAI,EAAE,OAAO,KAAK,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAA;;ACSvG,MAAM,MAAM,mCACP,UAAU,KACb,EAAE,EAAE,SAAS,GACd,CAAA;;;;;"}